{"title": "A DIY photo booth is exactly what you need for your next party", "content": " \nIn my personal experience, I\u2019ve found that parties with photo booths are more fun than parties without photo booths. But if you\u2019re hosting a big event or wedding, you\u2019ll know that actually renting a company to come set up a booth can get really expensive.\nBut why pay someone to come set up a booth and run it for you when you can just put a really great one together yourself? Here\u2019s how to do it.  \nSupplies\n\nA Raspberry Pi 3, or an older Raspberry Pi with a Wi-Fi adapter.\nA monitor with HDMI-in, to be the screen of the photo booth.\nA DLSR or other camera that can connect to the Pi over USB, along with whatever weird cable your camera needs to do it. \nA mouse and keyboard, which you\u2019ll need to get things set up on the Pi. \nA tripod, ideally one that\u2019s taller than your screen so that you don\u2019t block the camera. \nPatience for messing around with network settings.\n\n\n\n\n\n\n\n\n\nPutting it together\nThere\u2019s basically two parts to this project. The easy part is connecting everything, and the slightly harder part is software. Fortunately, there\u2019s a wealth of various photo booth solutions for a Raspberry Pi out there online already. I used one from developer Phillip Trenz that had a useful local Wi-Fi feature for downloading photos, but there\u2019s plenty of other options out there. \nTo install it, follow Trenz\u2019s instructions from the Github page for the project. Essentially, what you\u2019re doing here is installing the various pieces of software the program needs to run \u2014 including gphoto2, which is a super comprehensive piece of open-source image capture software that works with almost every camera ever made. Then, install the app itself, and you\u2019re good to go.\n\n\n\n\n\n\n\n\nA few tips from putting this together along the way: once you connect the camera, you need to eject it from the local filesystem, since it can\u2019t be mounted as a folder and used as a camera at the same time. Similarly, I\u2019d recommend setting the camera to shoot in JPEG \u2014 not RAW \u2014 if you\u2019re using a DSLR. This is because the Pi has trouble handling the larger images. \nThere\u2019s also a config.json file where you can edit some settings, like whether or not the app will run in fullscreen or if you want the camera to save pictures or simply store them directly on the Pi. \n\n\n\n\n\n\n\n\n(I didn\u2019t set up a DNS server, but this still worked pretty well for the afternoon we had this set up)\n\n\nAs a final piece of the project, Trenz\u2019s app does also include a local webapp for viewing and displaying pictures. The trick here, though is to get the Pi to broadcast a local Wi-Fi network, which is kind of complicated. This guide from developer Phil Martin over at Frillip is a good place to start \u2014 when you get everything setup correctly, you\u2019ll have a local network. Then, you\u2019ll just need an IP address to share with guests for access to the photos. If you\u2019re really clever, you can use DNS mapping to make an actual simple address for your local network, like photo.booth, to make it easier to get to. \nYou\u2019ll note that we mostly just left our tripod and screen out, but if you\u2019re holding a formal event, feel free to dress up the scene as much as you\u2019d like with a cardboard frame or drop cloth to cover up some of the more technical aspects. \nOh, and don\u2019t forget props. What\u2019s a photo booth without some silly hats?\n"}
